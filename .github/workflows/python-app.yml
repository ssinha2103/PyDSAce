## This workflow will install Python dependencies, run tests and lint with a single version of Python
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
#
#name: Python application
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#permissions:
#  contents: read
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python 3.9
#      uses: actions/setup-python@v3
#      with:
#        python-version: "3.9"
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8 pytest
#        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#    - name: Lint with flake8
#      run: |
#        # stop the build if there are Python syntax errors or undefined names
#        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#    - name: Run tests with pytest
#      if: ${{ ne(run_tests, false) && run_test_files }}
#      run: |
#        if ls *_test.py 1> /dev/null 2>&1; then pytest; else echo "No test files found."; fi
#    - name: Build executable
#      run: pyinstaller myapp.py
#    - name: Upload artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: myapp
#        path: dist/myapp

name: Python application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  run_tests: true
  run_test_files: true

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with pytest
      if: ${{ env.run_tests != false && env.run_test_files }}
      run: |
        if ls *_test.py 1> /dev/null 2>&1; then pytest; else echo "No test files found."; fi

    - name: Build executable
      run: pyinstaller myapp.py

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: myapp
        path: dist/myapp
